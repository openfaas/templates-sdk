plugins {
  id 'java-library'
  id 'maven-publish'
  id 'signing'
}

description = 'OpenFaaS Model for function invocations.'
version = '0.1.1'

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

test {
  useJUnitPlatform()
}

repositories {
  jcenter()
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
  withJavadocJar()
  withSourcesJar()
}

publishing {
 publications {
   mavenJava(MavenPublication) {
       from components.java

       pom {
            url = 'http://www.openfaas.com/'
            description = 'OpenFaaS Model for function invocations.'

             licenses {
               license {
                 name = 'MIT'
                 url = 'https://opensource.org/licenses/MIT'
               }
             }

             scm {
                 connection = 'scm:git:https://github.com/openfaas/templates-sdk.git'
                 developerConnection = 'scm:git:https://github.com/openfaas/templates-sdk.git'
                 url = 'https://github.com/openfaas/templates-sdk/'
             }
             developers {
                 developer {
                   id = 'openfaas'
                   name = 'OpenFaaS Ltd'
                   email = 'alex@openfaas.com'
                 }
             }
       }
   }
 }
  repositories {
    maven {
      def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"

      url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl

      credentials(PasswordCredentials) {
        username = project.hasProperty('ossrhUsername') ? ossrhUsername : null;
        password = project.hasProperty('ossrhPassword')? ossrhPassword : null;
      }
    }
  }
}

signing {
    def signingKeyId = findProperty("openfaas.signingKeyId")
    def signingKey = findProperty("openfaas.signingKey")
    def signingPassword = findProperty("openfaas.signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)

    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
